// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

model User {
  id             String     @id @default(cuid())
  email          String     @unique
  name           String?
  passwordDigest String
  role           Role       @default(USER)
  imageId        String?    @unique
  image          UserImage? @relation(fields: [imageId], references: [id])
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  enabled        Boolean    @default(true)
}

model UserImage {
  id         String      @id @default(uuid())
  url        String
  publicId   String
  uploadedAt DateTime    @default(now())
  user       User?       @relation
  technician Technician? @relation
}

model Skill {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  enabled     Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  serviceToJobTypes ServiceToJobTypeSkill[]
  technicians       TechnicianSkill[]
}

model ServiceToJobType {
  id               String   @id @default(cuid())
  displayName      String
  serviceTitanId   Int
  serviceTitanName String
  emoji            String
  icon             String
  description      String
  enabled          Boolean
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  skills ServiceToJobTypeSkill[]
}

enum TechnicianStatus {
  ON_JOB
  ON_ROUTE
  FINISHED_JOB
  AWAITING_JOB
}

model Technician {
  id             String   @id @default(cuid())
  technicianId   Int      @unique
  technicianName String
  enabled        Boolean  @default(true)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  imageId String?    @unique
  image   UserImage? @relation(fields: [imageId], references: [id])

  status  TechnicianStatus @default(AWAITING_JOB)

  skills TechnicianSkill[]
}

model ServiceToJobTypeSkill {
  serviceToJobTypeId String
  skillId            String

  serviceToJobType ServiceToJobType @relation(fields: [serviceToJobTypeId], references: [id])
  skill            Skill            @relation(fields: [skillId], references: [id])

  @@id([serviceToJobTypeId, skillId])
}

model TechnicianSkill {
  technicianId String
  skillId      String

  technician Technician @relation(fields: [technicianId], references: [id])
  skill      Skill      @relation(fields: [skillId], references: [id])

  @@id([technicianId, skillId])
}

model AppSetting {
  id        Int      @id @default(autoincrement())
  key       String
  value     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([key])
}

model Booking {
  id           String   @id @default(uuid())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  customerId   String
  jobId        String   @unique
  serviceId    String
  technicianId String
  scheduledFor DateTime
  revenue      Float    @default(0.0)
  status       String
  notes        String
}
